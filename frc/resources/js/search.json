[[{"i":"welcome-to-the-4733-frc-wiki","l":"Welcome to the 4733 FRC Wiki!","p":["This Wiki is still a work in progress. There may be issues with the current content, or may be missing important details.","Welcome to the 4733 Scarlett Robotics Team wiki. Our group is made up of 4 sub-teams: Design, Electrical, Build and Code. In each sub-team you will learn various skills and methods to design, build, wire and code. Each sub-team has specific roles and tasks to complete."]},{"l":"Build","p":["Build team assumes the role of the constructors of the team. They build the robots frame and various subsystems. Often seen in their natural habitat surrounded by tools and metal. They communicate through a series of grunts and metal screeching sounds."]},{"l":"Code","p":["The Code sub-team are entrusted with making the robot have a brain. Often seen working with Undertale of Legend of Zelda music in the background and communicating through beeps and robotic screeching. Do not enter their workspace without energy drinks and sugar."]},{"l":"Design","p":["Design is our sub-team responsible for 3d modelling our parts, running the 3d printer and running simulations of the robot. You should not approach their enclosure without pizza or energy drinks. They are a subgenus of the Code genus."]},{"l":"Electrical","p":["Electrical has the task of wiring and repairing the electrical and pneumatic systems. Electrical and Build are often seen together, as they have a symbiotic relationship. They like to play with electricity and watching the news for shocking developments."]}],[{"l":"Code","p":["The code team is an integral part to the team. As a member of code team, you will be required to:","Write code for the robot in Java","Help develop ideas for the robot","Communicate with Build, Electrical, Design, and Drive Team when making decisions","Test the code written to find bugs and issues","Implement fixes to any problems that occur along the way","The code used for the robot uses more advanced Java features (such as Object-Oriented Programming), which is not taught in CS until Computer Science 30.","Members on code team are expected to be able to bring in their own laptop to use for code. While the team does have two laptops available, they may be used by another sub-team (such as Design)."]}],[{"l":"Software","p":["Multiple pieces of software are required to program the robot. While not every piece of software is required, having it will make your life easier.","Please note that some of the software is updated every season. Please make sure the software you are using is up to date. Using an older version may go against the rules of the FRC competition.","WPILib VSCode","WPILib VSCode is a version of the Visual Studio Code text editor with pre-installed required extensions.","Github Desktop","Github Desktop is a desktop application that allows you to create and manage repositories on Github. VSCode has a git client built in, but Github Desktop has additional features that may come in useful.","Git Bash","Git Bash is a terminal application that allows you to interact with Git. VSCode has a built in terminal, however, having a bash terminal installed on your system outside VSCode can come in handy.","Phoenix Tuner","Phoenix Tuner is a program that allows you to interact with CTRE motor controllers and set up the CAN bus. It is highly recommended at least one person on the team has this installed.","RoboRIO Imaging Tool","RoboRIO Imaging Tool is a program that allows you to manage the firmware on the RoboRIO. It is highly recommended at least one person on the team has this installed.","FRC Radio Configuration Utility","FRC Radio Configuration Utility is a program that allows you to manage the radio configuration. It is highly recommended at least one person on the team has this installed."]}],[{"l":"Project Setup"},{"l":"Creating a new Project","p":["If a project for the year already exists, please clone the repo from github rather than creating a new project.","Open WPILib VSCode","Click the 'W' icon in the top right corner.","Choose Create New Project from the dropdown menu.","Click select project type","Choose Template > Java > Command Robot","Choose a location on your hard drive to create the project","Give the project a name. The recommended name is 4733 FRC {YEAR}, where {YEAR} is the current year.","Click generate project."]},{"l":"Acquiring an Existing Project from Github","p":["You must be in the ScarlettRobotics Github organization to clone and contribute to the codebase. If you are not part of the organization, talk to the head of the code team to be added."]},{"i":"using-vscodes-git-client","l":"Using VSCode's Git Client","p":["Open WPILib VSCode","Click the git tab on the left","Click the clone button","Choose Clone from Github in the dropdown menu.","If asked to sign in, sign in with your github account.","Choose this years project repository from the list."]},{"l":"Using Github Desktop","p":["Open Github Desktop","Choose File > Clone Repository","Choose this years project repository from the list."]},{"l":"Using Git CLI","p":["Open a terminal window.","Find the URL of the git repository for this year's project.","Clone the repository.","Open the project in VSCode."]}],[{"l":"Project Structure","p":["autonomousInit()","autonomousPeriodic()","Available Methods:","Called every tick the robot is disabled. It is against the rules to interact with any subsystems here.","Called every tick the robot is in an active state. This function must call CommandScheduler.getInstance().run()","Called every tick the robot is in autonomous mode.","Called every tick the robot is in teleop mode.","Called every tick the robot is in test mode.","Called when autonomous mode is enabled.","Called when teleop mode is enabled.","Called when test mode is enabled.","Called when the robot is disabled. Add any necessary cleanup code here.","Called when the robot is first started up. Best used for any extra initialization code.","Default Value:","disabledInit()","disabledPeriodic()","Example:","Here, commands and subsystems are instantiated and configured.","Joysticks","Learn More","Main.java is the main file that is run when the robot is started.","Method","Motor ports","robotInit()","robotPeriodic()","Sensor ports","teleopInit()","teleopPeriodic()","testInit()","testPeriodic()","The bulk of the robot functionality should be defined in this file.","The robot code is split into a variety of files. The purpose of each file is as follows:","This file is the main code for the robot. You will mostly be using commands and subsystems to define the behavior of the robot, but this file can be used for any initialization code, or any code that always needs to be run.","This file should be used to define important values critical to the robot's operation. Values that should be defined here include:","This file should not be modified.","Use"]},{"l":"Example Project","p":["A basic example project can be found on the Scarlett Robotics GitHub organization."]}],[{"l":"Commands and Subsystems","p":["The primary function of the robot is controlled by commands and subsystems."]},{"l":"Subsystems","p":["Subsystems define the overarching structure of the robot, encapsulating motors, solenoids, and some sensors. Additionally, subsystems abstract the operation of motors and solenoids, making the code more readable and easier to maintain."]},{"l":"Commands","p":["boolean","Commands are the primary way that the robot will be controlled. They take in controller and sensor input, and then use the input to control the robot through the subsystems.","constructor","Creates a new instance of the command.","end()","execute()","initialize()","isFinished()","Method","Must call addRequirements(subsystem) for each subsystem that the command uses","N/A","None","Requirements","Returns","Returns true if the command is finished. Usually only used for autonomous commands.","Runs every tick the command is running.","Runs when the command is finished.","Runs when the command is first initialized.","Use","void"]},{"l":"Registering Teleop Commands","p":["All registration for commands and subsystems is done through the RobotContainer class. See the example below:"]},{"l":"Autonomous Commands","p":["Taking input from the driver during autonomous violates the rules of the competition, and penalties will be given to the team.","Autonomous commands are commands that are run automatically during the autonomous period. They can only use sensors and cameras to navigate and score points.","Autonomous commands are created in the same way as teleop commands, but are registered differently."]},{"l":"Registering Autonomous Commands","p":["As with teleop commands, all registration for commands and subsystems is done through the RobotContainer class. However, instead of being registered through the constructor, autonomous commands are registered through the RobotContainer.getAutonomousCommand() method.","In order for the AutonomousCommand to work through the getAutonomousCommand() method, a Robot.java should use the default autonomousInit() method."]}],[{"l":"Components","p":["Here, you will find a list of all the components that are used in the robot and how to incorporate them into your code."]}],[{"l":"CAN Bus Motor Controllers","p":["CAN bus is another way of connecting motors to the RoboRIO. Instead of connecting in parallel to the PWM ports, CAN motors are connected to the CAN bus in series. They must be configured in the Phoenix software, and using the Java API requires the vendor library to be installed."]},{"l":"Installing the software","p":["At least one person on the team needs to have the CTRE electronics software installed on their laptop. CAN Bus Motor Controllers"]},{"l":"Using the software"},{"l":"Connecting to the RoboRIO through the CTRE Phoenix software","p":["Open Phoenix Tuner","Connect the laptop to the robot over USB. The RoboRIO has a USB-B port on it, and is the port that should be used.","In the Phoenix Tuner software, select the CAN Bus tab.","When finished, click the restart robot code button."]},{"l":"Configuring the CAN Bus"},{"l":"Identifying devices"},{"l":"Changing the device name and ID"},{"l":"Upgrading the device firmware"},{"l":"Installing the WPILib vendor library","p":["Note that using the online vendor library requires an internet connection.","Click the W icon in the top-right corner of WPILib VSCode.","Choose Manage Vendor Libraries","Choose 'Install New Libraries'","If you have the Phoenix software installed, use offline and select the 'CTRE-Phoenix'.","Otherwise, use online, and use the url found on this page."]},{"l":"Using the WPILib vendor library","p":["Once the vendor library is installed, you can use CAN motors (like the TalonSRX) the same as any other motor controller. For the motor port, use the CAN ID assigned in the Phoenix software.","CAN Bus Motor Controllers"]}],[{"l":"PWM Motor Controllers","p":["Motor controllers are responsible for controlling the speed of a motor. In code, they are based on the interface MotorController with implementations including VictorSPX, Spark, and TalonSRX.","The motor controller used on the physical robot must be the same as the one used in the code."]},{"l":"Defining PWM Motor Controllers","p":["All motor controllers should always be defined within a subsystem. This allows the code to remain operate, and allows for multiple commands to use the same motor. The constructor for the motor controller takes in the physical port the controller is plugged into on the RoboRIO.","Motors should be defined as a property of the class, and should always be private.","Motors should then have their functionality defined by a method in the subsystem."]},{"l":"Interacting with PWM Motor Controllers","p":["boolean inverted","double speed","get()","getInverted()","Gets the speed of the motor","Gets whether the motor is inverted","Method","Parameters","PWM motor controllers are controlled by setting the speed of the motor. A list of methods that can be used with Speed Controllers are as follows:","Returns","set()","setInverted()","Sets the speed of the motor","Sets whether the motor is inverted","stopMotor()","Stops the motor","Use"]},{"l":"Controller Groups","p":["Controller groups allow you to control multiple motors at the same time. Controller groups are defined as follows:","Motor controller groups are used in the same way as a regular motor controller."]},{"l":"Differential Drive","p":["Differential drives are used often for the robot's drive train. It provides an interface for common forms of drive, such as tank drive and arcade drive.","Drive Type","Description","Tank Drive","Tank drive controls the left and right sides in absolute speed. It is the equivalent of controlling the left and right motor groups separately. driveTrain.tankDrive(leftSpeed, rightSpeed)","Arcade Drive","Arcade drive controls the robot using speed and rotation. The robot moves at the speed and rotates at the rate specified. driveTrain.arcadeDrive(speed, rotation)"]}],[{"l":"Design","p":["The design team is an integral part to the team. As a member of design team, you will be required to:","Use 3D-modeling software to design the robot.","Use 3D-modeling software to design parts for the robot.","Become familiar with the 3D printer.","Work closely with Build team and Electrical team to ensure any designs work on the physical robot.","The design team is crucial to the success of the team. Designs are used to test ideas before they are implemented, allowing for rapid prototyping."]}],[{"l":"3D Printer","p":["All 3d print files must be in stl format and brought to a senior to be sliced and printed","Personal prints will cost 10¢ per meter of filament used","Failure to comply with these rules will result in loss of 3d printer privileges"]},{"l":"Finding a file to print and slicing","p":["Ensure the file is stl. Import the file into a slicer along with any other files you would like to print. The preferred slicer for the Monoprice printer is IIIP Cura a python based Cura version. If any other 3d printers have been obtained use Prusa3d slicer."]},{"l":"Ensuring printer is prepared for printing","p":["Bed Temp (C): 50","Bottom/Top thickness (mm): 0.6","Brim for less expansive prints.","Diameter (mm): Change as Needed","Distance (mm): 7","Enable Retraction: yes","Everywhere if overhang above model","Fill Density (%): 90","Flow (%): 100.0","Initial Layer Line Width (%): 100.0","Initial Layer Thickness: 0.3","Layer Height (mm): 0.1","Nozzle size (mm): 0.4","Platform Adhesion type:","Please make sure the following settings are set in the IIIP Cura software:","Print Speed (mm/s): 50","Printing Temp (C): 195","Raft for large and sensitive prints.","Shell Thickness (mm): 1.2","Speed (mm/s): 40.0","Support Type: Change as needed.","Touching build plate if no overhang above model."]}],[{"l":"Build","p":["The build team is an integral part to the team. As a member of build team, you will be required to:","Work with tools, materials, and other parts to build the robot","Help develop ideas for the robot","Communicate with Code, Electrical, and Design when making decisions","Work closely with Design team to ensure any designs work on the physical robot.","Many of your responsibilities overlap with the Electrical team's responsibilities. Cooperation among team members is crucial to the success of the team.","Because power tools and other dangerous equipment is used while building the robot, safety is a top priority. Horseplay is strictly forbidden."]}],[{"l":"Electrical","p":["The electrical team is an integral part to the team. As a member of the electrical team, you will be required to:","Wire the robot's electrical components","Fix electrical issues","Communicate with Build, Code, and Design when making decisions","Inform code team with the types of motors used, an the ports they are plugged into.","Safety is a top priority with electrical. Strict guidelines must be in place to prevent electrical issues, including shocks and fires."]}]]